#!/usr/bin/env ruby

require "fileutils"

name         = ARGV.shift
provider     = ARGV.shift
access_key   = ARGV.shift
secret_key   = ARGV.shift
ipaddress    = ARGV.shift
password     = ARGV.shift
region       = ARGV.shift || "us-east-1"
keypair_name = ARGV.shift || "ec2"

def usage
  $stderr.puts "USAGE: create_micro_bosh_yml NAME aws ACCESS_KEY SECRET_KEY IP_ADDRESS RAW_PASSWORD [REGION=us-east-1] [KEYNAME=ec2]"
  exit 1
end

usage unless provider
usage unless provider.upcase == 'AWS'
usage unless password

def salted_password(password)
  `mkpasswd -m sha-512 '#{password}'`.strip
end

def aws_config_yml(name, access_key, secret_key, region, key_name, ipaddress, salted_password, options={})

  # sanity checks
  raise "Something went wrong. This is not a salted password: " +
        "#{salted_password}" unless salted_password.start_with?("$")
  require 'ipaddr'
  IPAddr.new ipaddress

  region         = options[:region] || 'us-east-1'
  key_name       = options[:key_name] || 'ec2'
  kernel_id      = options[:kernel_id] || 'aki-b4aa75dd'
  image_id       = options[:image_id] || 'ami-0743ef6e' # TODO not currently used in micro_bosh.yml
  stemcell_disk  = options[:stemcell_disk] || 4096
  security_group = options[:security_group] || 'default'
  instance_type  = options[:instance_type] || 'm1.small'
  <<-YAML
---
name: #{name}

env:
  bosh:
    password: #{salted_password}

logging:
  level: DEBUG

network:
  type: dynamic
  ip: #{ipaddress}

resources:
  cloud_properties:
    instance_type: #{instance_type}
    root_device_name: /dev/sda1

cloud:
  plugin: aws
  properties:
    aws:
      access_key_id:     #{access_key}
      secret_access_key: #{secret_key}
      ec2_endpoint: ec2.#{region}.amazonaws.com
      default_key_name: #{key_name}
      default_security_groups: ["#{security_group}"]
      ec2_private_key: /home/vcap/.ssh/#{key_name}.pem
    stemcell:
      image_id #{image_id}
      kernel_id: #{kernel_id}
      root_device_name: /dev/sda1
      disk: #{stemcell_disk}
YAML
end

salty = salted_password(password)
yml = aws_config_yml(name, access_key, secret_key, ipaddress, salty, options={})

micro_bosh_yml = File.join(name, "micro_bosh.yml")
FileUtils.mkdir_p(name)
File.open(micro_bosh_yml, "w") { |f| f << yml }
$stderr.puts "Created #{micro_bosh_yml}..."
